package chat;
/**
 * 聊天室服务端
 * @author ddhjy
 *
 */

import java.net.ServerSocket;
import java.net.Socket;

public class Server {
	/*
	 * 运行在服务端下的ServerSocket主要负责：
	 * 1，向系统申请服务端口
	 * 	客户端就是通过这个端口与之连接的
	 * 2，监听申请的服务端口，当一个客户端通过
	 * 该端口尝试建立连接时，ServerSocket会在
	 * 服务端创建一个Socket与客户端建立连接。
	 */
	private ServerSocket server;
	/**
	 * 初始化服务端
	 */
	public Server ()throws Exception {
		/*
		 * 初始化的同时申请服务端口
		 */
		server = new ServerSocket(8088);
	}
	/**
	 * 服务端开始工作的方法
	 */
	public void start() {
		try {
			/*
			 * ServerSocket的accept方法是一个
			 * 阻塞方法，其作用是监听服务端口，
			 * 直到一个客户端连接并创建一个Socket
			 * 使用该Socket即可与刚连接的客户端进行交互
			 */
			System.out.println("等待客户端连接...");
			Socket socket = server.accept();
			System.out.println("一个客户端连接了！");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		try {
			Server server = new Server();
			server.start();
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("服务端启动失败！");
		}
	}
}
